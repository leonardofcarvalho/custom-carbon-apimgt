swagger: '2.0'
######################################################
# Prolog
######################################################
info:
  version: "0.9.0"
  title: "WSO2 API Manager"
  description: |
    This document specifies a **RESTful API** for WSO2 **API Manager**.
    
    You can find the source of this API definition 
    [here](https://github.com/hevayo/restful-apim). 
    It was written with [swagger 2](http://swagger.io/).

  contact:
    name: "WSO2"
    url: "http://wso2.com/products/api-manager/"
    email: "architecture@wso2.com"
  license: 
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

######################################################
# Specifying the fixed parts of the URLs of the API
######################################################

# The schemes supported by the API
schemes: 
  - https

# The domain of the API.
# This is configured by the customer during deployment.
# The given host is just an example.
host: apis.wso2.com

# The base path of the API.
# Will be prefixed to all paths.
#
# ??? Decision was to use semantic versioning (major.minor.patch)
# ??? For comprehensibility we should add "v" on front of the digits.
# 
# ??? We decided to add a tenent_id to the base path.
# ??? What is the stucture of a tenent_id? Where schould be add it?
basePath: /publisher/v1.0.0

# The following media types can be passed as input in message bodies of the API.
# The actual media type must be specified in the Content-Type header field of the request.
# The default is json, i.e. the Content-Type header is not needed to
# be set, but supporting it serves extensibility.
consumes: 
  - application/json

# The following media types may be passed as output in message bodies of the API.
# The media type(s) consumable by the requestor is specified in the Accept header field
# of the corresponding request. 
# The actual media type returned will be specfied in the Content-Type header field 
# of the of the response.
# The default of the Accept header is json, i.e. there is not needed to
# set the value, but supporting it serves extensibility.
produces: 
  - application/json

######################################################
# The "API Collection" resource APIs
######################################################
paths:
  /apis:

#-----------------------------------------------------
# Retrieving the list of all APIs qualifying under a given search condition  
#-----------------------------------------------------
    get:
      summary: |
        Retrieving APIs
      description: |
        Get a list of available APIs qualifying under a given search condition.
      parameters:
        - $ref : "#/parameters/limit"
        - $ref : "#/parameters/offset"
        - name : query
          in: query
          description: |
            **Search condition**.

            You can search in attributes by using an **"attribute:"** modifier.

            Eg. "provider:wso2" will match an API if the provider of the API is wso2.

            Supported attribute modifiers are [**version, context, status,
            description, subcontext, doc, provider, tag **]

            If no advanced attribute modifier has been specified, search will match the
            given query string against API Name.
          type: string
        - name: type
          in: query
          description: |
            List prototype or production APIs.
          type: string
          enum:
            - PRODUCTION
            - PROTOTYPE
# ??? Provide list of attributes we support for sorting
        - name: sort
          in: query
          type: string
          description: | 
            ** Sort expression **

            A *sort expression* consists of a sequence of names of API 
            properties concatenated by a '+' or '-' (indicating ascending or 
            decending order) separated by a comma. The sequence of names 
            corresponds to a conjunction. 
        - $ref : "#/parameters/Accept"
        - $ref : "#/parameters/If-None-Match"
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API Collection
#        - Retrieve
      responses:
        200:
          description: OK. List of qualifying APIs is returned.
          schema:
            $ref: '#/definitions/APIList'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Create a new API 
#-----------------------------------------------------
    post:
      description: Create a new API
      parameters:
        - in: body
          name: body
          description: API object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/API'
        - $ref: '#/parameters/Content-Type'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API Collection
#        - Create
      responses:
        '201':
          description: Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.
          schema:
            $ref: '#/definitions/API'
          headers:
            Location:
              description: The URL of the newly created resource.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        '415':
          description: Unsupported Media Type. The entity of the request was in a not supported format.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Individual API" resource APIs
######################################################
  /apis/{apiId}:

#-----------------------------------------------------
# Retrieve the details of an API definition
#-----------------------------------------------------
    get:
      description: Get details of an API
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API (individual)
#        - Retrieve
      responses:
        '200':
          description: OK Requested API is returned
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.'
              type: string
          schema:
            $ref: '#/definitions/API'
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '404':
          description: Not Found. Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Update the definition of an API
#-----------------------------------------------------
    put:
      description: Update an existing API
      parameters:
        - $ref: '#/parameters/apiId'
        - in: body
          name: body
          description: API object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/API'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API (individual)
#        - Update
      responses:
        '200':
          description: OK. Successful response with updated API object
          schema:
            $ref: '#/definitions/API'
          headers:
            Location:
              description: The URL of the newly created resource.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The request must be conditional but no condition has been specified.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete the definition of an API
#-----------------------------------------------------
    delete:
      description: Delete an existing API
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API (individual)
#        - Delete
      responses:
        '200':
          description: OK. Resource successfully deleted.
        '403':
          description: Forbidden. The request must be conditional but no condition has been specified.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Copy API" Processing Function resource API
######################################################
  /apis/copy-api:

#-----------------------------------------------------
# Create a new API based on an already existing one
#-----------------------------------------------------
    post:
      parameters:
        - name: newVersion
          description: Version of the new API.
          type: string
          in: query
        - $ref: '#/parameters/apiId-Q'
      description: Create a new API by copying an existing API
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API (individual)
#        - Copy
      responses:
        '201':
          description: Created. Successful response with the newly created API as entity in the body. Location header contains URL of newly created API.
          headers:
            Location:
              description: The URL of the newly created API.
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. API to copy does not exist.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Change Lifecycle" Processing Function resource API
######################################################
  /apis/change-lifecycle:

#-----------------------------------------------------
# Change the lifecycle of an API
#-----------------------------------------------------
    post:
      description: Change the lifecycle of an API
      parameters:
        - name: newState
          description: New lifecycle state of the API.
          type: string
          in: formData
        - name: publishToGateway
          type: string
          in: formData
        - name: resubscription
          type: string
          in: formData
        - $ref: '#/parameters/apiId-Q'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API (individual)
#        - Change Lifecycle
      responses:
        '200':
          description: OK. Lifecycle changed successfully.
          headers:
            ETag:
              description: 'Entity Tag of the changed API. Used by caches, or in conditional request'
              type: string
            Last-Modified:
              description: 'Date and time the API lifecycle has been modified the last time. Used by caches, or in conditional requests.'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Document Collection" resource APIs
######################################################
  /apis/{apiId}/documents:

#-----------------------------------------------------
# Retrieve the documents associated with an API that qualify under a search condition
#-----------------------------------------------------
    get:
      description: Get a list of documents belonging to an API.
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
#
# ????? We need to specify the search condition  ?????
        - name: query
          in: query
          description: Search condition.
          type: string
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API (individual)
#        - Retrieve Documents
      responses:
        '200':
          description: OK. Document list is returned.
          schema:
#
# ????? For consistency reasons:  ?????
# ????? Define a "Document List" object  ?????
            title: DocumentList
            properties:
              count:
                type: string
              next:
                type: string
                description: Link to next page. Empty if no more documents are to be returned.
              previous:
                type: string
                description: Link to previous page. Empty if current page is first page.
              list:
                type: array
                items:
                  $ref: '#/definitions/Document'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '404':
          description: Not Found. Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Add a document to a certain API
#-----------------------------------------------------
    post:
      description: Add a new document to an API
      parameters:
        - $ref: '#/parameters/apiId'
        - in: body
          name: body
          description: Document object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Document'
        - $ref: '#/parameters/Content-Type'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API (individual)
#        - Add Document
      responses:
        '201':
          description: Created. Successful response with the newly created Document object as entity in the body. Location header contains URL of newly added document.
          schema:
            $ref: '#/definitions/Document'
          headers:
            Location:
              description: Location to the newly created Document.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '415':
          description: Unsupported media type. The entity of the request was in a not supported format.

######################################################
# The "Individual Document" resource APIs
######################################################
  '/apis/{apiId}/documents/{documentId}':

#-----------------------------------------------------
# Retrieve a particular document of a certain API
#-----------------------------------------------------
    get:
      description: Get a particular document associated with an API.
      parameters:
        - $ref: '#/parameters/apiId'
        - name: documentId
          in: path
          description: Document Id
          required: true
          type: number
          format: integer
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API (individual)
#        - Retrieve Document
      responses:
        '200':
          description: OK. Document returned.
          schema:
            $ref: '#/definitions/API'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '404':
          description: Not Found. Requested Document does not exist.
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Update a particular document of a certain API
#-----------------------------------------------------
    put:
      description: Update document details.
      parameters:
        - $ref: '#/parameters/apiId'
        - name: documentId
          in: path
          description: Document Id
          required: true
          type: number
          format: integer
        - in: body
          name: body
          description: Document object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Document'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API (individual)
#        - Update Document
      responses:
        '200':
          description: OK. Document updated
          schema:
            $ref: '#/definitions/Document'
          headers:
            Location:
              description: The URL of the updated document.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete a particular document of a certain API
#-----------------------------------------------------
    delete:
      description: Delete a document of an API
      parameters:
        - $ref: '#/parameters/apiId'
        - name: documentId
          in: path
          description: Document Id
          required: true
          type: number
          format: integer
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - API (individual)
#        - Delete Document
      responses:
        '200':
          description: OK. Resource successfully deleted.
        '404':
          description: Not Found. Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Application Collection" resource APIs
######################################################
  /applications:

#-----------------------------------------------------
# Retrieve a list of all applications of a certain subscriber
#-----------------------------------------------------
    get:
      description: Get a list of applications
      parameters:
        - $ref: '#/parameters/subscriber'
        - $ref: '#/parameters/groupId'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Application Collection
#        - Retrieve
      responses:
        '200':
          description: OK. Application list returned.
          schema:
            $ref: '#/definitions/ApplicationList'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Create a new application
#-----------------------------------------------------
    post:
      description: Create a new application
      parameters:
        - in: body
          name: body
          description: Application object that is to be created
          required: true
          schema:
            $ref: '#/definitions/Application'
        - $ref: '#/parameters/Content-Type'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Application (individual)
#        - Create
      responses:
        '201':
          description: Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.
          schema:
            $ref: '#/definitions/Application'
          headers:
            Location:
              description: Location of the newly created Application.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '415':
          description: Unsupported media type. The entity of the request was in a not supported format.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Individual Application" resource APIs
######################################################
  '/applications/{applicationId}':

#-----------------------------------------------------
# Retrieve the details about a certain application
#-----------------------------------------------------
    get:
      description: Get application details
      parameters:
        - $ref: '#/parameters/applicationId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Application (individual)
#        - Retrieve
      responses:
        '200':
          description: OK. Application returned.
          schema:
            $ref: '#/definitions/Application'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '404':
          description: Requested application does not exist.
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Update a certain application
#-----------------------------------------------------
    put:
      description: Update application details
      parameters:
        - $ref: '#/parameters/applicationId'
        - in: body
          name: body
          description: Application object that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/Application'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Application (individual)
#        - Update
      responses:
        '200':
          description: OK. Application updated.
          schema:
            $ref: '#/definitions/Application'
          headers:
            Location:
              description: The URL of the newly created resource.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete a certain application
#-----------------------------------------------------
    delete:
      description: Remove an application
      parameters:
        - $ref: '#/parameters/applicationId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Application (individual)
#        - Delete
      responses:
        '200':
          description: OK. Resource successfully deleted.
        '404':
          description: Not Found. Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'
    parameters:
      - $ref: '#/parameters/applicationId'

######################################################
# The "Generate Keys" Processing Function resource API
######################################################
  '/applications/{applicationId}/generate-keys':

#-----------------------------------------------------
# Generate keys for an application
#-----------------------------------------------------
    post:
      description: Generate keys for application
      parameters:
        - $ref: '#/parameters/applicationId'
        - in: body
          name: body
          description: Application Key Generation object that includes request parameters
          required: true
          schema:
            $ref: '#/definitions/ApplicationKeyGenerateRequest'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Application (individual)
#        - Generate Keys
      responses:
        '200':
          description: OK. Specified Production or Sandbox keys generated.
          schema:
            $ref: '#/definitions/Application'
          headers:
            Location:
              description: The URL of the newly created resource.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Subscription Collection" resource APIs
######################################################
  /subscriptions:

#-----------------------------------------------------
# Retrieve all subscriptions of a certain API and application
#-----------------------------------------------------
    get:
      description: Get subscription list
      parameters:
        - in: query
          name: apiId
          description: Will return sunscriptions for the provided API
          type: string
        - in: query
          name: applicationId
          type: string
          description: Will return subscriptions for the provided Application
        - $ref: '#/parameters/groupId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Subscription Collection
#        - Retrieve
      responses:
        '200':
          description: OK. Subscription list returned.
          schema:
            title: SubscriptionList
            properties:
              count:
                type: string
              next:
                type: string
                description: Link for next page. Empty if no more subscriptions are to be returned.
              previous:
                type: string
                description: Link for previous page. Empty if current page is first page.
              list:
                type: array
                items:
                  $ref: '#/definitions/Subscription'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Create a new subscription
#-----------------------------------------------------
    post:
      description: Add a new subscription
      parameters:
        - in: body
          name: body
          description: Subscription object that should to be added
          required: true
          schema:
            $ref: '#/definitions/Subscription'
        - $ref: '#/parameters/Content-Type'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Subscription (individual)
#        - Create
      responses:
        '201':
          description: Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.
          schema:
            $ref: '#/definitions/Subscription'
          headers:
            Location:
              description: Location to the newly created subscription.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '415':
          description: Unsupported media type. The entity of the request was in a not supported format.

######################################################
# The "Individual Subscription" resource APIs
######################################################
  '/subscriptions/{subscriptionId}':

#-----------------------------------------------------
# Retrieve a certain subscription
#-----------------------------------------------------
    get:
      description: Get subscription details
      parameters:
        - $ref: '#/parameters/subscriptionId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Subscription (individual)
#        - Retrieve
      responses:
        '200':
          description: OK. Subscription returned
          schema:
            $ref: '#/definitions/Subscription'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '404':
          description: Not Found. Requested Subscription does not exist.
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'
#-----------------------------------------------------
# Update a certain subscription
#-----------------------------------------------------
    put:
      description: Update subscription details
      parameters:
        - $ref: '#/parameters/subscriptionId'
        - in: body
          name: body
          description: Subscription object that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/Subscription'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      responses:
        '200':
          description: OK. Subscription updated
          schema:
            $ref: '#/definitions/Subscription'
            Location:
              description: The URL of the newly created resource.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete a certain subscription
#-----------------------------------------------------
    delete:
      description: Remove subscription
      parameters:
        - $ref: '#/parameters/subscriptionId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Subscription (individual)
#        - Delete
      responses:
        '200':
          description: OK. Resource successfully deleted.
        '404':
          description: Not Found. Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Block Subscription" Processing Function resource API
######################################################
  /block-subscription:

#-----------------------------------------------------
# Block a certain subscription
#-----------------------------------------------------
    post:
      parameters:
        - $ref: '#/parameters/subscriptionId-Q'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      description: Block a subscription.
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Subscription (individual)
#        - Block
      responses:
        '200':
          description: OK. Subscription was blocked successfully.
          headers:
            ETag:
              description: 'Entity Tag of the blocked subscription. Used by caches, or in conditional request'
              type: string
            Last-Modified:
              description: 'Date and time the subscription has been blocked. Used by caches, or in conditional requests.'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. Requested subscription does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Tier Collection" resource APIs
######################################################
  /tiers:

#-----------------------------------------------------
# Retrieve the list of all available tiers
#-----------------------------------------------------
    get:
      description: Get available tiers
      parameters:
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Tier Collection
#        - Retrieve
      responses:
        '200':
          description: OK. List of tiers returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/Tier'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Create a new tier
#-----------------------------------------------------
    post:
      description: Add a new tier
      parameters:
        - in: body
          name: body
          description: Subscription object that should to be added
          required: true
          schema:
            $ref: '#/definitions/Tier'
        - $ref: '#/parameters/Content-Type'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Tier (individual)
#        - Create
      responses:
        '201':
          description: Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.
          schema:
            $ref: '#/definitions/Tier'
          headers:
            Location:
              description: Location to the newly created tier.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '415':
          description: Unsupported media type. The entity of the request was in a not supported format.

######################################################
# The "Individual Tier" resource APIs
######################################################
  '/tiers/{tierName}':

#-----------------------------------------------------
# Retrieve a certain tier
#-----------------------------------------------------
    get:
      description: Get tier details
      parameters:
        - $ref: '#/parameters/tierName'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Tier (individual)
#        - Retrieve
      responses:
        '200':
          description: OK. tier returned
          schema:
            $ref: '#/definitions/Tier'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '404':
          description: Not Found. Requested Subscription does not exist.
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Update a certain tier
#-----------------------------------------------------
    put:
      description: Update tier details
      parameters:
        - $ref: '#/parameters/tierName'
        - in: body
          name: body
          description: Tier object that needs to be modified
          required: true
          schema:
            $ref: '#/definitions/Tier'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Tier (individual)
#        - Update
      responses:
        '200':
          description: OK. Subscription updated.
          schema:
            $ref: '#/definitions/Tier'
          headers:
            Location:
              description: The URL of the newly created resource.
              type: string
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional request'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete a certain tier
#-----------------------------------------------------
    delete:
      description: Remove a tier
      parameters:
        - $ref: '#/parameters/tierName'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Tier (individual)
#        - Delete
      responses:
        '200':
          description: OK. Resource successfully deleted.
        '404':
          description: Not Found. Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Update Permission" Processing Function resource API
######################################################
  '/tiers/{tierName}/update-permission':

#-----------------------------------------------------
# Update the permission of a certain tier
#-----------------------------------------------------
    post:
      parameters:
        - $ref: '#/parameters/tierName'
        - in: body
          name: permissions
          schema:
            $ref: '#/definitions/TierPermission'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      description: Update tier permission
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Tier (individual)
#        - Update Permission
      responses:
        '200':
          description: OK. Successfully updated tier permissions
          schema:
            type: array
            items:
              $ref: '#/definitions/Tier'
          headers:
            ETag:
              description: 'Entity Tag of the modified tier. Used by caches, or in conditional request'
              type: string
            Last-Modified:
              description: 'Date and time the tier has been modified. Used by caches, or in conditional requests.'
              type: string
        '400':
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized. User not allowed to update tier permission
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        '403':
          description: Forbidden. The request must be conditional but no condition has been specified.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found. Requested tier does not exist.
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Tag Collection" resource API
######################################################
  /tags:

#-----------------------------------------------------
# Retrieve the list of tags qualifying under a search condition
#-----------------------------------------------------
    get:
      description: Get a list of tags
      parameters:
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - name: query
          in: query
          description: >
            **Search condition**.


            You can search in attributes by using **"attribute:"** modifier.


            Supported attribute modifiers are [**apiName,version**]


            Eg. "apiName:phoneVerification" will match if the API Name is
            phoneVerification.


            If no attribute modifier is found search will match the given query string against Tag Name.
          type: string
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Tag Collection
#        - Retrieve
      responses:
        '200':
          description: OK. tag list is returned.
          schema:
            title: Tag List
            properties:
              count:
                type: string
              list:
                type: array
                items:
                  $ref: '#/definitions/Tag'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '404':
          description: Not Found. Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Environment Collection" resource API
######################################################
  /environments:

#-----------------------------------------------------
# Retrieve the list of environments configured for a certain API
#-----------------------------------------------------
    get:
      description: Get a list of gateway environments configured previously
      parameters:
        - in: query
          name: apiId
          description: Will return environment list for the provided API
          type: string
# Tags can be used to filter APIs in the online documentation
#      tags:
#        - Environment Collection
#        - Retrieve
      responses:
        '200':
          description: OK. environment list is returned.
          schema:
            title: Environment List
            properties:
              count:
                type: string
              list:
                type: array
                items:
                  $ref: '#/definitions/Environment'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
        '304':
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
        '404':
          description: Not Found. Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

######################################################
# Parameters
######################################################
parameters:
  apiId:
    name: apiId
    in: path
    description: "**API ID** consisting of the name of the API, the identifier of the version and of the provider of the API. \nShould be formatted as **name/version/provider**\n"
    required: true
    type: string
  apiId-Q:
    name: apiId
    in: query
    description: "**API ID** consisting of the name of the API, the identifier of the version and of the provider of the API. \nShould be formatted as **name/version/provider**\n"
    required: true
    type: string
  applicationId:
    name: applicationId
    in: path
    description: Application Id
    required: true
    type: string
  groupId:
    name: groupId
    in: query
    description: Application Group Id
    required: false
    type: string
  subscriber:
    name: subscriber
    in: query
    description: Subscriber username
    required: false
    type: string
  subscriptionId:
    name: subscriptionId
    in: path
    description: Subscription Id
    required: true
    type: string
  subscriptionId-Q:
    name: subscriptionId
    in: query
    description: Subscription Id
    required: true
    type: string
  tierName:
    name: tierName
    in: path
    description: Tier name
    required: true
    type: string
  limit:
    name: limit
    in: query
    description: Maximum size of API array to return.
    required: true
    type: number
    format: integer
  offset:
    name: offset
    in: query
    description: Starting point of the item list.
    required: true
    type: number
    format: integer
  Accept:
    name: Accept
    in: header
    description: 'Media types acceptable for the response. Should denote XML or JSON, default is JSON.'
    type: string
  Content-Type:
    name: Content-Type
    in: header
    description: 'Media type of the entity in the request body. Should denote XML or JSON, default is JSON.'
    type: string
  If-None-Match:
    name: If-None-Match
    in: header
    description: Validator for conditional requests; based on ETag.
    type: string
  If-Modified-Since:
    name: If-Modified-Since
    in: header
    description: Validator for conditional requests; based on Last Modified header.
    type: string
  If-Match:
    name: If-Match
    in: header
    description: Validator for conditional requests; based on ETag.
    type: string
  If-Unmodified-Since:
    name: If-Unmodified-Since
    in: header
    description: Validator for conditional requests; based on Last Modified header.
    type: string

######################################################
# Definitions
######################################################
definitions:
  APIList:
    title: APIList
    properties:
      count:
        type: integer
      next:
        type: string
        description: Link for next page. Empty if no more APIs to be returned.
      previous:
        type: string
        description: Link for previous page. Empty if current page is first page.
      list:
        type: array
        items:
          $ref: '#/definitions/APIInfo'
  APIInfo:
    title: API info object with basic api details.
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      type:
        type: string
        enum:
          - REST
          - SOAP
      context:
        type: string
      version:
        type: string
      provider:
        description: If the provider value is not given user invoking the api will be used as the provider.
        type: string
      status:
        type: string
  API:
    title: API object
    required:
      - name
      - context
      - version
      - apiDefinition
    properties:
      id:
        type: string
        description: UUID of the api registry artifact
      name:
        type: string
      description:
        type: string
      type:
        type: string
        enum:
          - REST
          - SOAP
      context:
        type: string
      version:
        type: string
      provider:
        description: If the provider value is not given user invoking the api will be used as the provider.
        type: string
      apiDefinition:
        description: Swagger definition of the API which contains details about URI templates and scopes
        type: string
      status:
        type: string
      responseCaching:
        type: string
      cacheTimeout:
        type: integer
      destinationStatsEnabled:
        type: string
      isDefaultVersion:
        type: boolean
      transport:
        type: array
        items:
          type: string
          enum:
            - http
            - https
      tags:
        type: array
        items:
          type: string
      tiers:
        type: array
        items:
          type: string
      visibility:
        type: string
        enum:
          - PUBLIC
          - PRIVATE
          - RESTRICTED
          - CONTROLLED
      visibleRoles:
        type: array
        items:
          type: string
      visibleTenants:
        type: array
        items:
          type: string
      endpointConfig:
        type: string
      sequences:
        type: array
        items:
          $ref: '#/definitions/Sequence'
      subscriptionAvailability:
        type: string
        enum:
          - current_tenant
          - all_tenants
          - specific_tenants
      subscriptionAvailableTenants:
        type: array
        items:
          type: string
      businessInformation:
        properties:
          businessOwner:
            type: string
          businessOwnerEmail:
            type: string
          technicalOwner:
            type: string
          technicalOwnerEmail:
            type: string
  ApplicationList:
    title: ApplicationList
    properties:
      count:
        type: integer
      next:
        type: string
        description: Link for next page. Empty if no more APIs to be returned.
      previous:
        type: string
        description: Link for previous page. Empty if current page is first page.
      list:
        type: array
        items:
          $ref: '#/definitions/ApplicationInfo'
  Application:
    title: Application
    required:
      - applicationId
      - name
      - subscriber
      - throttlingTier
    properties:
      applicationId:
        type: string
      name:
        type: string
      subscriber:
        description: If subscriber is not given user invoking the API will be taken as the subscriber.
        type: string
      throttlingTier:
        type: string
      callbackUrl:
        type: string
      description:
        type: string
      groupId:
        type: string
      keys:
        type: array
        items:
          $ref: '#/definitions/ApplicationKey'
  ApplicationInfo:
    title: Application info object with basic application details
    properties:
      applicationId:
        type: string
      name:
        type: string
      subscriber:
        type: string
      throttlingTier:
        type: string
      callbackUrl:
        type: string
      description:
        type: string
      groupId:
        type: string
  Document:
    title: Document
    required:
      - name
      - type
    properties:
      documentId:
        type: string
      name:
        type: string
      type:
        type: string
        enum:
          - HOWTO
          - SAMPLES
          - PUBLIC_FORUM
          - SUPPORT_FORUM
          - API_MESSAGE_FORMAT
          - SWAGGER_DOC
          - OTHER
      summary:
        type: string
      source:
        type: string
        enum:
          - INLINE
          - URL
          - FILE
      visibility:
        type: string
        enum:
          - OWNER_ONLY
          - PRIVATE
          - API_LEVEL
  Tier:
    title: Tier
    required:
      - name
    properties:
      name:
        type: string
      description:
        type: string
      attributes:
        description: custom attributes added to the tier policy
        type: object
        additionalProperties:
          type: string
      requestCount:
        description: Maximum number of requests which can be sent within a provided unit time
        type: number
      unitTime:
        type: number
      billingPlan:
        description: This attribute declares whether this tier is available under commercial or free
        type: string
      continueOnQuotaReach:
        description: 'By making this attribute to true, you are capabale of sending requests even request count exceeded within a unit time'
        type: boolean
  TierPermission:
    title: tierPermission
    properties:
      enableAccess:
        type: string
      roles:
        type: array
        items:
          type: string
  Subscription:
    title: Subscription
    required:
      - subscriptionId
    properties:
      subscriptionId:
        type: string
      applicationId:
        type: string
      apiId:
        type: string
      tier:
        type: string
      status:
        type: string
        enum:
          - BLOCKED
          - PROD_ONLY_BLOCKED
          - UNBLOCKED
          - ON_HOLD
          - REJECTED
  Sequence:
    title: Sequence
    required:
      - name
    properties:
      name:
        type: string
      config:
        type: string
      type:
        type: string
  Tag:
    title: Tag
    required:
      - name
    properties:
      name:
        type: string
      weight:
        type: integer
  Error:
    title: Error object returned with 4XX HTTP status
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
        description: Error message.
      description:
        type: string
        description: A detail description about the error message.
      moreInfo:
        type: string
        description: Preferably an url with more details about the error.
      error:
        type: array
        description: If there are more than one error list them out. Ex. list out validation errors by each field.
        items:
          $ref: '#/definitions/ErrorListItem'
  ErrorListItem:
    title: Description of individual errors that may have occurred during a request.
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
        description: Description about individual errors occurred
  Environment:
    title: Environment
    required:
      - name
      - type
      - serverUrl
      - endpoints
      - showInApiConsole
    properties:
      name:
        type: string
      type:
        type: string
      serverUrl:
        type: string
      showInApiConsole:
        type: boolean
      endpoints:
        $ref: '#/definitions/EnvironmentEndpoints'
  EnvironmentEndpoints :
    title: Environment Endpoints
    properties:
      http:
        type: string
        description: HTTP environment URL
      https:
        type: string
        description: HTTPS environment URL
  Token :
    title: Token details for invoking APIs
    properties:
      accessToken:
        type: string
        description: Access token
      refreshToken:
        type: string
        description: Refresh token
      tokenState:
        type: string
        description: Token state
      tokenScopes:
        type: array
        items: 
          type: string
        description: Valid scopes for the access token
      validityTime:
        type: integer
        format: int64
        description: Maximum validity time for the access token
  ApplicationKey :
    title: Application key details
    properties:
      consumerKey:
        type: string
        description: Consumer key of the application
      consumerSecret:
        type: string
        description: Consumer secret of the application
      supportedGrantTypes:
        type: array
        items: 
          type: string
        description: Supported grant types for the application
      keyState:
        type: string
        description: State of the key generation of the application
      keyType:
        description: Key type
        type: string
        enum:
          - PRODUCTION
          - SANDBOX
      token:
        description: Token details object
        $ref: '#/definitions/Token'
  ApplicationKeyGenerateRequest :
    title: Application key generation request object
    properties:
      keyType:
        type: string
        enum:
          - PRODUCTION
          - SANDBOX
      validityTime:
        type: string
      callbackUrl:
        type: string
        description: Callback URL
      accessAllowDomains:
        type: array
        items: 
          type: string
        description: Allowed domains for the access token
      scopes:
        type: array
        items: 
          type: string
        description: Allowed scopes for the access token
